 {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### PART 7 : Zonal Vulnerability"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's focus on the zonal vulnerability of the water production facilities (wells and drain) by importing the `SSZV` *(Steady-State Zonal Vulnerability)* tool. To Build a `SSZV` instance 3 objects are needed:\n",
    "- `gwf`: the ground water flow model (`flopy.mf6.mfmodel.MFModel`) \n",
    "- `mpsim`: the advective transport simulation (`flopy.modpath.mp7sim.Modpath7Sim`)\n",
    "- `shp_name` or `geometry_dic`: shapefile path or dictionary of `shapely` geometries (polygon(s)) that contains vulnerability zones"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  Create a SSZV objet (Steady-State Zonal Vulnerability)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ---- Import Steady-State River Vulnerability instance\n",
    "from vulnerability import SSZV\n",
    "\n",
    "# ---- Create SSZV object\n",
    "sszv = SSZV(gwf = gwf, mpsim = mpsim,\n",
    "            shp_name = shp_dic['vul_zones'],\n",
    "            field_id = 'FID')\n",
    "\n",
    "# ---- SSZV instance infos\n",
    "print(sszv)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Compute zonal vulnerability"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`SSZV` tool allows to compute the number of particles that terminate in the water production facility from a given potential zone of contamination. This index can be calculate with or without ponderating the number of particle by their arrival velocity at the production point (`pond_velocity`). For an homogeneous hydraulic conductivity the velocity does not really matter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ---- Compute zonal vulnerability in percent with particle velocity ponderation\n",
    "s = time.time()\n",
    "zv_df = sszv.compute_zonal_vulnerability(pond_velocity = True) * 100\n",
    "exe_time = round(time.time()  - s, 2)\n",
    "print(f'Execution time for {len(sszv.edp.get_alldata())} particles with velocity ponderation: {exe_time}s')\n",
    "display(zv_df.round(decimals = 2))\n",
    "\n",
    "# ---- Compute zonal vulnerability in percent without particle velocity ponderation\n",
    "s = time.time()\n",
    "zv_df_without_v = sszv.compute_zonal_vulnerability(pond_velocity = False) * 100\n",
    "exe_time = round(time.time()  - s, 2)\n",
    "print(f'Execution time for {len(sszv.edp.get_alldata())} particles without velocity ponderation: {exe_time}s')\n",
    "display(zv_df_without_v.round(decimals = 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: This is a **semi-quantitative spatial method** that give a index ratio as `number of captured particles / total number of sown particles` where all the particles that touch or cross a given potential polluted zone are considered contiminated. Of course, the result of this method cannot be robust as the mixing ratio with the river discussed earlier but it works as a additionnal **indicator** of vulnerability analysis and give some informations about connections between groundwater withdraw facilities and polluted zones."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plots results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ---- Prepare axes for plot\n",
    "plt.rc('font', family='serif', size=8)\n",
    "fig = plt.figure(figsize=(7, 7))\n",
    "ax = fig.add_subplot(1, 1, 1, aspect='equal')\n",
    "ax.set_title('Modpath7 pathlines' , fontsize=10)\n",
    " \n",
    "# ---- Create Plot Map View object\n",
    "pmv = flopy.plot.PlotMapView(model=gwf, ax=ax)\n",
    "pmv.plot_grid(lw = 0)\n",
    "\n",
    "# ---- Plot zones\n",
    "sszv.vul_zone.plot(ax = ax,color = 'burlywood', edgecolor=\"black\", lw=0.5, zorder = 10)\n",
    "coords = sszv.vul_zone['geometry'].apply(lambda x: x.representative_point().coords[:])\n",
    "sszv.vul_zone['rp'] = [coords[0] for coords in coords]\n",
    "for idx, row in sszv.vul_zone.iterrows():\n",
    "    plt.annotate(s=row['FID'], xy=row['rp'],\n",
    "                 horizontalalignment='center',\n",
    "                 fontsize = 7,\n",
    "                 color = 'black',\n",
    "                 zorder = 50)\n",
    "\n",
    "# ---- Plot heads as background\n",
    "hds = sim.simulation_data.mfdata[gwf.name,'HDS','HEAD'][-1,-1,-1,:]\n",
    "heads = pmv.plot_array(hds, masked_values=[1.e+30], alpha=0.5)\n",
    "cb = plt.colorbar(heads, shrink = 0.5)\n",
    "\n",
    "# ---- Plot pathlines for each group\n",
    "pth = flopy.utils.PathlineFile(mpname + '.mppth')\n",
    "colors = ['blue', 'purple', 'red']\n",
    "for pg, c in zip(particlegroups, colors):\n",
    "    nodes = pg.particledata.particledata.node\n",
    "    rec = pth.get_destination_pathline_data(nodes) \n",
    "    pmv.plot_pathline(rec, color = c, layer = 'all', lw = 0.03, alpha = 0.8,\n",
    "                    label=f'captured by {pg.particlegroupname}')\n",
    "# ---- Plot boundaries\n",
    "bc_colors_dic = { 'RIV': 'cyan', 'DRN': 'red', 'CHD': 'navy', 'WEL': 'coral'}\n",
    "for bc in bc_colors_dic.keys():\n",
    "    bounds = pmv.plot_bc(bc, color = bc_colors_dic[bc])\n",
    "    \n",
    "# ---- Plot legend\n",
    "leg = ax.legend(loc = 'lower right',fontsize = 6)\n",
    "for line in leg.get_lines():\n",
    "    line.set_linewidth(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Multiple particle intersections"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It may happen that a particle can cross successively several polluted areas. This makes the zonal vulnerability study even more complex. Let's investigate this part by keeping focus on the `z2` zone and adding a additionnal zone (can correspond to a pesticide storage warehouse for example) represented as a square polygon `(150m*150m)` named `z4` on the north west of the production well `w2`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ---- Fetch z2 zone geometry\n",
    "z2_geom = sszv.vul_zone.loc[sszv.vul_zone[sszv.field_id] == 'z2', 'geometry'].values[0]\n",
    "\n",
    "# ---- Build the new z3 zone\n",
    "from shapely.geometry import Point\n",
    "z4_geom = Point((850,1600)).buffer(150, cap_style = 3)\n",
    "\n",
    "# ---- Create a new SSZV object\n",
    "geom_dic = {vid:geom for vid,geom in zip(['z2', 'z4'],[z2_geom, z4_geom])}\n",
    "sszv2 = SSZV(gwf = gwf, mpsim = mpsim, geometry_dic = geom_dic)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot venn diagram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ---- Prepare axes for plot\n",
    "plt.rc('font', family='serif', size=6)\n",
    "fig = plt.figure(figsize=(6,6))\n",
    "ax0 = fig.add_subplot(1, 1, 1, aspect='equal')\n",
    "\n",
    "# ---- Create Plot Map View object\n",
    "pmv = flopy.plot.PlotMapView(model=gwf, ax=ax0)\n",
    "pmv.plot_grid(lw = 0)\n",
    "\n",
    "# ---- Plot heads as background\n",
    "hds = sim.simulation_data.mfdata[gwf.name,'HDS','HEAD'][-1,-1,-1,:]\n",
    "heads = pmv.plot_array(hds, masked_values=[1.e+30], alpha=0.5)\n",
    "\n",
    "# ---- Plot zones \n",
    "sszv2.vul_zone.plot(ax = ax0,color = ['darkgreen', 'orange'], edgecolor=\"black\", lw=0.5, zorder = 10)\n",
    "coords = sszv2.vul_zone['geometry'].apply(lambda x: x.representative_point().coords[:])\n",
    "sszv2.vul_zone['rp'] = [coords[0] for coords in coords]\n",
    "for idx, row in sszv2.vul_zone.iterrows():\n",
    "    plt.annotate(s=row['FID'], xy=row['rp'],\n",
    "                 horizontalalignment='center',\n",
    "                 fontsize = 7,\n",
    "                 color = 'black',\n",
    "                 zorder = 50)\n",
    "\n",
    "# ---- Plot pathlines for well w2\n",
    "pth = flopy.utils.PathlineFile(mpname + '.mppth')\n",
    "pg = [pg for pg in particlegroups if pg.particlegroupname == 'w2'][0]\n",
    "rec = pth.get_destination_pathline_data(pg.particledata.particledata.node)\n",
    "pmv.plot_pathline(rec, color = 'purple', layer = 'all', lw = 0.03, alpha = 0.8,\n",
    "                    label=f'captured by {pg.particlegroupname}')\n",
    "\n",
    "# ---- Plot boundaries\n",
    "bc_colors_dic = { 'RIV': 'cyan', 'DRN': 'red', 'CHD': 'navy'}\n",
    "for bc in bc_colors_dic.keys():\n",
    "    bounds = pmv.plot_bc(bc, color = bc_colors_dic[bc])\n",
    "\n",
    "# ---- Focus on z2, z4 areas\n",
    "ax0.set_xlim((300,2300))\n",
    "ax0.set_ylim((900,3200))\n",
    "\n",
    "# ---- Plot legend\n",
    "leg = ax0.legend(loc = 'lower right',fontsize = 6)\n",
    "for line in leg.get_lines():\n",
    "    line.set_linewidth(2)\n",
    "\n",
    "# ---- Embedding venn diagram in main plot\n",
    "embed_ax = inset_axes(ax0, width=\"50%\",height='30%',loc=1, borderpad=0)\n",
    "ax1,venn,circles = sszv2.plot_venn(ax = embed_ax, pg = 'w2',colors = ['darkgreen', 'darkorange'],\n",
    "                                   lw = 0.25, alpha = 1, textsize=3.5)\n",
    "embed_ax.set_title('Number of particles intersected', fontsize=6)\n",
    "embed_ax.set_facecolor('black')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Manage multiple intersections zonal vulnerability"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So, `539` particles out of the `1000` sown cross the `z2` zone, `110` particles cross the `z4` zone and `14` particles cross both areas. So, in order to calculate a unique understandable indicator 3 methods are available to manage this multiple intersections:\n",
    "- `first` : consider only the first zone of vulnerability intersected\n",
    "- `last`  : consider only the last zone of vulnerability intersected\n",
    "- `all`   : consider all zones of vulnerability intersected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ---- Compute zonal vulnerability for each intersection method\n",
    "dfs = []\n",
    "for method in sszv2.get_methods():\n",
    "    df = sszv2.compute_zonal_vulnerability(method = method) * 100\n",
    "    dfs.append(df.loc['w2'].to_frame().T)\n",
    "\n",
    "# ---- Concatenate all results in a single Data Frame\n",
    "zv_df = pd.concat(dfs)\n",
    "zv_df.index = sszv2.get_methods()\n",
    "display(zv_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: For the `all` method, a particle can be considerated multiple times: in `z2`,` z4` or `z2 & z4` zones. That's the reason why the general indicator can be more than `100%`."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
